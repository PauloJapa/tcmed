<?php

namespace DoctrineORMModule\Proxy\__CG__\Tcmed\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Hold extends \Tcmed\Entity\Hold implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'Tcmed\\Entity\\Hold' . "\0" . 'idHold', '' . "\0" . 'Tcmed\\Entity\\Hold' . "\0" . 'nomeHold', '' . "\0" . 'Tcmed\\Entity\\Hold' . "\0" . 'fantasiaHold', '' . "\0" . 'Tcmed\\Entity\\Hold' . "\0" . 'cnpj', '' . "\0" . 'Tcmed\\Entity\\Hold' . "\0" . 'createdAt', '' . "\0" . 'Tcmed\\Entity\\Hold' . "\0" . 'status', '' . "\0" . 'Tcmed\\Entity\\Hold' . "\0" . 'referenciaHold', '' . "\0" . 'Tcmed\\Entity\\Hold' . "\0" . 'referenciaTcmed', '' . "\0" . 'Tcmed\\Entity\\Hold' . "\0" . 'referenciaAdm', '' . "\0" . 'Tcmed\\Entity\\Hold' . "\0" . 'contatoContato', '' . "\0" . 'Tcmed\\Entity\\Hold' . "\0" . 'endereco');
        }

        return array('__isInitialized__', '' . "\0" . 'Tcmed\\Entity\\Hold' . "\0" . 'idHold', '' . "\0" . 'Tcmed\\Entity\\Hold' . "\0" . 'nomeHold', '' . "\0" . 'Tcmed\\Entity\\Hold' . "\0" . 'fantasiaHold', '' . "\0" . 'Tcmed\\Entity\\Hold' . "\0" . 'cnpj', '' . "\0" . 'Tcmed\\Entity\\Hold' . "\0" . 'createdAt', '' . "\0" . 'Tcmed\\Entity\\Hold' . "\0" . 'status', '' . "\0" . 'Tcmed\\Entity\\Hold' . "\0" . 'referenciaHold', '' . "\0" . 'Tcmed\\Entity\\Hold' . "\0" . 'referenciaTcmed', '' . "\0" . 'Tcmed\\Entity\\Hold' . "\0" . 'referenciaAdm', '' . "\0" . 'Tcmed\\Entity\\Hold' . "\0" . 'contatoContato', '' . "\0" . 'Tcmed\\Entity\\Hold' . "\0" . 'endereco');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Hold $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getIdHold()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getIdHold();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdHold', array());

        return parent::getIdHold();
    }

    /**
     * {@inheritDoc}
     */
    public function getNomeHold()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNomeHold', array());

        return parent::getNomeHold();
    }

    /**
     * {@inheritDoc}
     */
    public function getFantasiaHold()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFantasiaHold', array());

        return parent::getFantasiaHold();
    }

    /**
     * {@inheritDoc}
     */
    public function getCnpj()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCnpj', array());

        return parent::getCnpj();
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt($obj = false, $full = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', array($obj, $full));

        return parent::getCreatedAt($obj, $full);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatus', array());

        return parent::getStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function getReferenciaHold()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getReferenciaHold', array());

        return parent::getReferenciaHold();
    }

    /**
     * {@inheritDoc}
     */
    public function getReferenciaTcmed()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getReferenciaTcmed', array());

        return parent::getReferenciaTcmed();
    }

    /**
     * {@inheritDoc}
     */
    public function getReferenciaAdm()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getReferenciaAdm', array());

        return parent::getReferenciaAdm();
    }

    /**
     * {@inheritDoc}
     */
    public function getContatoContato()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContatoContato', array());

        return parent::getContatoContato();
    }

    /**
     * {@inheritDoc}
     */
    public function getEndereco()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEndereco', array());

        return parent::getEndereco();
    }

    /**
     * {@inheritDoc}
     */
    public function setId($idHold)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', array($idHold));

        return parent::setId($idHold);
    }

    /**
     * {@inheritDoc}
     */
    public function setIdHold($idHold)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdHold', array($idHold));

        return parent::setIdHold($idHold);
    }

    /**
     * {@inheritDoc}
     */
    public function setNomeHold($nomeHold)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNomeHold', array($nomeHold));

        return parent::setNomeHold($nomeHold);
    }

    /**
     * {@inheritDoc}
     */
    public function setFantasiaHold($fantasiaHold)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFantasiaHold', array($fantasiaHold));

        return parent::setFantasiaHold($fantasiaHold);
    }

    /**
     * {@inheritDoc}
     */
    public function setCnpj($cnpj)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCnpj', array($cnpj));

        return parent::setCnpj($cnpj);
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt(\DateTime $createdAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', array($createdAt));

        return parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function setStatus($status)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatus', array($status));

        return parent::setStatus($status);
    }

    /**
     * {@inheritDoc}
     */
    public function setReferenciaHold($referenciaHold)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setReferenciaHold', array($referenciaHold));

        return parent::setReferenciaHold($referenciaHold);
    }

    /**
     * {@inheritDoc}
     */
    public function setReferenciaTcmed($referenciaTcmed)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setReferenciaTcmed', array($referenciaTcmed));

        return parent::setReferenciaTcmed($referenciaTcmed);
    }

    /**
     * {@inheritDoc}
     */
    public function setReferenciaAdm($referenciaAdm)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setReferenciaAdm', array($referenciaAdm));

        return parent::setReferenciaAdm($referenciaAdm);
    }

    /**
     * {@inheritDoc}
     */
    public function setContatoContato(\Tcmed\Entity\Contato $contatoContato)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setContatoContato', array($contatoContato));

        return parent::setContatoContato($contatoContato);
    }

    /**
     * {@inheritDoc}
     */
    public function setEndereco(\Tcmed\Entity\Endereco $endereco)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEndereco', array($endereco));

        return parent::setEndereco($endereco);
    }

    /**
     * {@inheritDoc}
     */
    public function toArray()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'toArray', array());

        return parent::toArray();
    }

    /**
     * {@inheritDoc}
     */
    public function floatToStr($get, $dec = 2)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'floatToStr', array($get, $dec));

        return parent::floatToStr($get, $dec);
    }

    /**
     * {@inheritDoc}
     */
    public function strToFloat($check)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'strToFloat', array($check));

        return parent::strToFloat($check);
    }

    /**
     * {@inheritDoc}
     */
    public function strToDate($strDateTime = '')
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'strToDate', array($strDateTime));

        return parent::strToDate($strDateTime);
    }

    /**
     * {@inheritDoc}
     */
    public function dateToStr($date, $full = false, $obj = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'dateToStr', array($date, $full, $obj));

        return parent::dateToStr($date, $full, $obj);
    }

}
